<html>

  <head>
    <link rel="stylesheet" href="http://openlayers.org/en/v3.14.2/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.14.2/build/ol.js" type="text/javascript"></script>
    <link rel="stylesheet" href="ol3-layerswitcher/src/ol3-layerswitcher.css" />
    <script src="ol3-layerswitcher/src/ol3-layerswitcher.js"></script>
  </head>

  <body>
  <ul>
  <li>   <a href="/cgi-bin/mapserv?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&FORMAT=image%2Fpng&TRANSPARENT=true&LAYERS=default&map=%2Fetc%2Fmapserver%2Fmapserver_osm_templates%2Fmap%2Fqsgeo_subtlecolor.map&WIDTH=256&HEIGHT=256&CRS=EPSG%3A3857&STYLES=&BBOX=-13775786.985667605%2C5009377.085697312%2C-13149614.849955441%2C5635549.221409475">Test of a mapserv tile</a><br>
  <li><a href="/mapcache/wmts?service=wmts&request=GetCapabilities">Mapcache wmts capabilities</a><br>
  <li><a href="/mapcache/tms/1.0.0/subtlecolor@g2/7/20/78.png">Test of a mapcache tile</a>
  </ul>

  <br>
   
      <div id="map" style="width: 800px; height:600px; border: 1px solid black"></div>
      <script type="text/javascript">
        var projection = ol.proj.get('EPSG:3857');
        var projectionExtent = projection.getExtent();
        var layer = new ol.layer.Tile({
            extent: projectionExtent,  // this breaks firefox on Linux at zoom levels closer than 15.
            source: new ol.source.MapQuest({layer: 'sat'})
        });

       var layer_json = <%= File.read("#{ENV['PROJECT_DIR']}/templates/layers.json") %>

	var local_base_layers = layer_json.map( function(item,index){
	    return new ol.layer.Tile({
	       preload: Infinity,
	       type: 'base',
	       title: item.desc,
               visible: false,
	       source: new ol.source.XYZ({
		       url: '/mapcache/tms/1.0.0/' + item.name + '@g2/{z}/{x}/{-y}.png',
	       }),
	    });
	});
	local_base_layers[0].setVisible(true);
	    
	var external_base_layers = [

                    new ol.layer.Tile({
                        title: 'Stamen Watercolor',
                        type: 'base',
                        visible: false,
                        source: new ol.source.Stamen({
                            layer: 'watercolor'
                        })
                    }),
                    new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: false,
                        source: new ol.source.OSM()
                    }),

                    new ol.layer.Tile({
                        title: 'Satellite',
                        type: 'base',
                        visible: false,
                        source: new ol.source.MapQuest({layer: 'sat'})
                    })
       ];


        var layers = [
            new ol.layer.Group({
                'title': 'Base maps',
                layers: local_base_layers.concat(external_base_layers)
            }),
            new ol.layer.Group({
                title: 'Overlays',
                layers: [
                    new ol.layer.Tile({
                        title: 'Countries',
                        visible: false,
                        source: new ol.source.TileWMS({
                            url: 'http://demo.opengeo.org/geoserver/wms',
                            params: {'LAYERS': 'ne:ne_10m_admin_1_states_provinces_lines_shp'},
                            serverType: 'geoserver'
                        })
                    })
                ]
            })
        ];
        
        var map = new ol.Map({
          layers: layers,
          target: 'map',
          view: new ol.View({
	    center: [-13606244, 4548015],
            zoom: 12
          })
        });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'LÃ©gende' // Optional label for button
    });
    map.addControl(layerSwitcher);

    //////////////////////////////
    // http://openlayers.org/en/master/examples/permalink.html#map=2/-3589838.17/141009.86/0
    //////////////////////////////
    // default zoom, center and rotation
      var zoom = 2;
      var center = [0, 0];
      var rotation = 0;

      if (window.location.hash !== '') {
        // try to restore center, zoom-level and rotation from the URL
        var hash = window.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
          zoom = parseInt(parts[0], 10);
          center = [
            parseFloat(parts[1]),
            parseFloat(parts[2])
          ];
          rotation = parseFloat(parts[3]);
          map.getView().setCenter(center);
          map.getView().setZoom(zoom);
          map.getView().setRotation(rotation);
        }
      }

      var shouldUpdate = true;
      var view = map.getView();
      var updatePermalink = function() {
        if (!shouldUpdate) {
          // do not update the URL when the view was changed in the 'popstate' handler
          shouldUpdate = true;
          return;
        }
        var center = view.getCenter();
        var hash = '#map=' +
            view.getZoom() + '/' +
            Math.round(center[0] * 100) / 100 + '/' +
            Math.round(center[1] * 100) / 100 + '/' +
            view.getRotation();
        var state = {
          zoom: view.getZoom(),
          center: view.getCenter(),
          rotation: view.getRotation()
        };
        window.history.pushState(state, 'map', hash);
      };

      map.on('moveend', updatePermalink);

      // restore the view state when navigating through the history, see
      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
      window.addEventListener('popstate', function(event) {
        if (event.state === null) {
          return;
        }
        map.getView().setCenter(event.state.center);
        map.getView().setZoom(event.state.zoom);
        map.getView().setRotation(event.state.rotation);
        shouldUpdate = false;
      });
      </script>
</html>
