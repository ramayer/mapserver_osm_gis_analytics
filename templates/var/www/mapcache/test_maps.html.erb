<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no, width=device-width">
    <title>GIS Test Page</title>
    <style type="text/css">
      html, body, .map {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      }
    </style>
    <link rel="stylesheet" href="http://openlayers.org/en/v3.14.2/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.14.2/build/ol.js" type="text/javascript"></script>
    <link rel="stylesheet" href="ol3-layerswitcher/src/ol3-layerswitcher.css" />
    <script src="ol3-layerswitcher/src/ol3-layerswitcher.js"></script>
  </head>

  <!--
  <ul>
  <li>   <a href="/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=1300&HEIGHT=1300&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">Test of a mapserv tile</a><br>

  <li>  <a href="/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=5000&HEIGHT=5000&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">much larger tile</a>

  <li>  <a href="http://192.168.0.121/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=10000&HEIGHT=10000&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">and even larger</a>
  <li><a href="/mapcache/wmts?service=wmts&request=GetCapabilities">Mapcache wmts capabilities</a><br>
  <li><a href="/mapcache/tms/1.0.0/subtlecolor@g2/7/20/78.png">Test of a mapcache tile</a>
  </ul>
  -->
<body>
      <div id="map" class="map"></div>

      <script type="text/javascript">
        var projection = ol.proj.get('EPSG:3857');
        var projectionExtent = projection.getExtent();

    //////////////////////////////
    // http://openlayers.org/en/master/examples/permalink.html#map=2/-3589838.17/141009.86/0
    //////////////////////////////
    // default zoom, center and rotation
      var zoom = 12;
      var center = [-13606244, 4548015];
      var rotation = 0;

        function showPosition(position) {
            var position_in_3857 = ol.proj.transform([position.coords.longitude, position.coords.latitude], 'EPSG:4326', 'EPSG:3857');
            html5_position = position;
            map.getView().setCenter(position_in_3857);
            shouldUpdate = false;
        }

      if (window.location.hash !== '') {
        // try to restore center, zoom-level and rotation from the URL
        var hash = window.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
          zoom = parseInt(parts[0], 10);
          center = [
            parseFloat(parts[1]),
            parseFloat(parts[2])
          ];
          rotation = parseFloat(parts[3]);
        }
      } else {
       var html5_position;
       if (navigator.geolocation) {
           navigator.geolocation.getCurrentPosition(showPosition);
        } else {
        }
      }

       var layer_json = <%= File.read("#{ENV['PROJECT_DIR']}/templates/layers.json") %>
       var base_layers = layer_json.filter( function(value) { return value.type=='base' });
       var overlay_layers = layer_json.filter( function(value) { return value.type!='base' });

	var local_base_layers = base_layers.map( function(item,index){
	    return new ol.layer.Tile({
	       preload: Infinity,
	       type: 'base',
	       title: item.desc,
               visible: false,
	       source: new ol.source.XYZ({
		       url: '/mapcache/tms/1.0.0/' + item.name + '@g2/{z}/{x}/{-y}.png',
	       }),
	    });
	});
	local_base_layers[0].setVisible(true);
	    
	var local_overlay_layers = overlay_layers.map( function(item,index){
	    return new ol.layer.Tile({
	       title: item.desc,
               visible: false,
	       source: new ol.source.XYZ({
		       url: '/mapcache/tms/1.0.0/' + item.name + '@g2/{z}/{x}/{-y}.png',
	       }),
	    });
	});

	var external_base_layers = [

                    new ol.layer.Tile({
                        title: 'Stamen Watercolor',
                        type: 'base',
                        visible: false,
                        source: new ol.source.Stamen({
                            layer: 'watercolor'
                        })
                    }),
                    new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: false,
                        source: new ol.source.OSM()
                    }),
	
                    new ol.layer.Tile({
                        title: 'Old OSM Data',
                        visible: false,
                        type: 'base',
                        source: new ol.source.TileWMS({
                            url: 'https://go.leapportal.us/tilecache/tilecache.cgi',
                            params: {'LAYERS': 'subtlecolor2'} //,
                            // serverType: 'geoserver'
                        })
                    }),

	    new ol.layer.Tile({
	       preload: Infinity,
	       type: 'base',
	       title: 'azure test server',
               visible: false,
	       source: new ol.source.XYZ({
		       url: 'http://13.91.253.215/mapcache/tms/1.0.0/' + 'higher_contrast' + '@g2/{z}/{x}/{-y}.png',
	       }),
	    }),

                    new ol.layer.Tile({
                        title: 'Satellite',
                        type: 'base',
                        visible: false,
                        source: new ol.source.MapQuest({layer: 'sat'})
                    })
       ];


        var external_overlays = [
                    new ol.layer.Tile({
                        title: 'Countries',
                        visible: false,
                        source: new ol.source.TileWMS({
                            url: 'http://demo.opengeo.org/geoserver/wms',
                            params: {'LAYERS': 'ne:ne_10m_admin_1_states_provinces_lines_shp'},
                            serverType: 'geoserver'
                        })
                    })
                ];

        var layers = [
            new ol.layer.Group({
                'title': 'Base maps',
                layers: local_base_layers.concat(external_base_layers)
            }),
            new ol.layer.Group({
                title: 'Overlays',
                layers: local_overlay_layers.concat(external_overlays)
            })
        ];
        
        var map = new ol.Map({
          layers: layers,
          target: 'map',
          view: new ol.View({
	    center: center,
            zoom: zoom,
            rotation: rotation
          })
        });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'LÃ©gende' // Optional label for button
    });
    map.addControl(layerSwitcher);



      var shouldUpdate = true;
      var view = map.getView();
      var updatePermalink = function() {
        if (!shouldUpdate) {
          // do not update the URL when the view was changed in the 'popstate' handler
          shouldUpdate = true;
          return;
        }
        var center = view.getCenter();
        var hash = '#map=' +
            view.getZoom() + '/' +
            Math.round(center[0] * 100) / 100 + '/' +
            Math.round(center[1] * 100) / 100 + '/' +
            view.getRotation();
        var state = {
          zoom: view.getZoom(),
          center: view.getCenter(),
          rotation: view.getRotation()
        };
        window.history.pushState(state, 'map', hash);
      };

      map.on('moveend', updatePermalink);

      // restore the view state when navigating through the history, see
      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
      window.addEventListener('popstate', function(event) {
        if (event.state === null) {
          return;
        }
        map.getView().setCenter(event.state.center);
        map.getView().setZoom(event.state.zoom);
        map.getView().setRotation(event.state.rotation);
        shouldUpdate = false;
      });
      </script>
</body>
<a href="test_maps.html#default">default</a>
</html>
