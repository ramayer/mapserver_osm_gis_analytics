<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no, width=device-width">
    <title>GIS Test Page</title>
    <style type="text/css">
      html, body, .map {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      }
    </style>
    <link rel="stylesheet" href="http://openlayers.org/en/v3.15.1/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.15.1/build/ol.js" type="text/javascript"></script>
    <link rel="stylesheet" href="ol3-layerswitcher/src/ol3-layerswitcher.css" />
    <script src="ol3-layerswitcher/src/ol3-layerswitcher.js"></script>
  </head>

  <!--
  <ul>
  <li>   <a href="/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=1300&HEIGHT=1300&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">Test of a mapserv tile</a><br>

  <li>  <a href="/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=5000&HEIGHT=5000&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">much larger tile</a>

  <li>  <a href="http://192.168.0.121/cgi-bin/mapserv/?VERSION=1.1.1&REQUEST=GetMap&SERVICE=WMS&STYLES=&BBOX=-13678711.959745%2c4519415.734389%2c-13579343.822975%2c4618783.871160&WIDTH=10000&HEIGHT=10000&FORMAT=image%2fpng&SRS=EPSG%3a3857&LAYERS=default&map=%2fetc%2fmapserver%2fsubtlecolor.map">and even larger</a>
  <li><a href="/mapcache/wmts?service=wmts&request=GetCapabilities">Mapcache wmts capabilities</a><br>
  <li><a href="/mapcache/tms/1.0.0/subtlecolor@g2/7/20/78.png">Test of a mapcache tile</a>
  </ul>
  -->
<body>
      <div id="map" class="map"></div>
      <script type="text/javascript">
        var projection = ol.proj.get('EPSG:3857');
        var projectionExtent = projection.getExtent();

    //////////////////////////////
    // http://openlayers.org/en/master/examples/permalink.html#map=2/-3589838.17/141009.86/0
    //////////////////////////////
    // default zoom, center and rotation
      var zoom = 12;
      var center = [-13606244, 4548015];
      var rotation = 0;

        function showPosition(position) {
            var position_in_3857 = ol.proj.transform([position.coords.longitude, position.coords.latitude], 'EPSG:4326', 'EPSG:3857');
            html5_position = position;
            map.getView().setCenter(position_in_3857);
            shouldUpdate = false;
        }

      if (window.location.hash !== '') {
        // try to restore center, zoom-level and rotation from the URL
        var hash = window.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
          zoom = parseInt(parts[0], 10);
          center = [
            parseFloat(parts[1]),
            parseFloat(parts[2])
          ];
          rotation = parseFloat(parts[3]);
        }
      } else {
       var html5_position;
       if (navigator.geolocation) {
           navigator.geolocation.getCurrentPosition(showPosition);
        } else {
        }
      }

       var layer_json = <%= File.read("#{ENV['PROJECT_DIR']}/templates/layers.json") %>
       var base_layers = layer_json.filter( function(value) { return value.type=='base' });
       var overlay_layers = layer_json.filter( function(value) { return value.type!='base' });

	var local_base_layers = base_layers.map( function(item,index){
	    return new ol.layer.Tile({
	       preload: Infinity,
	       type: 'base',
	       title: item.desc,
               visible: false,
	       source: new ol.source.XYZ({
		       url: '/mapcache/tms/1.0.0/' + item.name + '@g2/{z}/{x}/{-y}.png',
	       }),
	    });
	});
	local_base_layers[0].setVisible(true);
	    
	var local_overlay_layers = overlay_layers.map( function(item,index){
	    return new ol.layer.Tile({
	       title: item.desc,
               visible: false,
	       source: new ol.source.XYZ({
		       url: '/mapcache/tms/1.0.0/' + item.name + '@g2/{z}/{x}/{-y}.png',
	       }),
	    });
	});


////////////////////////////////////////////////////////////////////////////////
// Atlas
// # http://openlayers.org/en/v3.15.1/examples/symbol-atlas-webgl.html?q=vector
////////////////////////////////////////////////////////////////////////////////
var atlasManager = new ol.style.AtlasManager({
    // we increase the initial size so that all symbols fit into
    // a single atlas image
    initialSize: 512
});

var symbolInfo = [{
    opacity: 1.0,
    scale: 1.0,
    fillColor: 'rgba(255, 153, 0, 0.4)',
    strokeColor: 'rgba(255, 204, 0, 0.2)'
}, {
    opacity: 0.75,
    scale: 1.25,
    fillColor: 'rgba(70, 80, 224, 0.4)',
    strokeColor: 'rgba(12, 21, 138, 0.2)'
}, {
    opacity: 0.5,
    scale: 1.5,
    fillColor: 'rgba(66, 150, 79, 0.4)',
    strokeColor: 'rgba(20, 99, 32, 0.2)'
}, {
    opacity: 1.0,
    scale: 1.0,
    fillColor: 'rgba(176, 61, 35, 0.4)',
    strokeColor: 'rgba(145, 43, 20, 0.2)'
}];

var radiuses = [3, 6, 9, 15, 19, 25];
var symbolCount = symbolInfo.length * radiuses.length * 2;
var symbols = [];
var i, j;
for (i = 0; i < symbolInfo.length; ++i) {
    var info = symbolInfo[i];
    for (j = 0; j < radiuses.length; ++j) {
	// circle symbol
	symbols.push(new ol.style.Circle({
	    opacity: info.opacity,
	    scale: info.scale,
	    radius: radiuses[j],
	    fill: new ol.style.Fill({
		color: info.fillColor
	    }),
	    stroke: new ol.style.Stroke({
		color: info.strokeColor,
		width: 1
	    }),
	    // by passing the atlas manager to the symbol,
	    // the symbol will be added to an atlas
	    atlasManager: atlasManager
	}));

	// star symbol
	symbols.push(new ol.style.RegularShape({
	    points: 8,
	    opacity: info.opacity,
	    scale: info.scale,
	    radius: radiuses[j],
	    radius2: radiuses[j] * 0.7,
	    angle: 1.4,
	    fill: new ol.style.Fill({
		color: info.fillColor
	    }),
	    stroke: new ol.style.Stroke({
		color: info.strokeColor,
		width: 1
	    }),
	    atlasManager: atlasManager
	}));
    }
}

var featureCount = 50000;
var features = new Array(featureCount);
var feature, geometry;
var e = 25000000;
for (i = 0; i < featureCount; ++i) {
    geometry = new ol.geom.Point(
	[2 * e * Math.random() - e, 2 * e * Math.random() - e]);
    feature = new ol.Feature(geometry);
    feature.setStyle(
	new ol.style.Style({
	    image: symbols[i % symbolCount]
	})
    );
    features[i] = feature;
}

var vectorSource = new ol.source.Vector({
    features: features
});
var atlasvector = new ol.layer.Vector({
    title: 'Atlas Vectors',
    visible: false,
    source: vectorSource
});




////////////////////////////////////////////////////////////////////////////////
// KML
////////////////////////////////////////////////////////////////////////////////


	var styleCache = {};
	var lightningStyleFunction = function(feature) {
	// 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a
	// standards-violating <magnitude> tag in each Placemark.  We extract it from
	  // the Placemark's name instead.
	  var name = feature.get('name');
	  var magnitude = parseFloat(name.substr(2));
	  var size = parseInt(10 + 40 * (magnitude - 5), 10);
	  var style = styleCache[size];
	  if (!style) {
	  var canvas =
	  /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));
	  var vectorContext = ol.render.toContext(
	  /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d')),
	  {size: [size + 2, size + 2], pixelRatio: size / 10});
	  vectorContext.setStyle(new ol.style.Style({
	  fill: new ol.style.Fill({color: 'rgba(255, 153, 0, 0.4)'}),
	  stroke: new ol.style.Stroke({color: 'rgba(255, 204, 0, 0.2)', width: 1})
	  }));
	  vectorContext.drawGeometry(new ol.geom.Polygon(
	  [[[0, 0], [4, 2], [6, 0], [10, 5], [6, 3], [4, 5], [0, 0]]]));
	  style = new ol.style.Style({
	  image: new ol.style.Icon({
	  img: canvas,
	  imgSize: [canvas.width, canvas.height],
	  rotation: 1.2
	  })
	  });
	  styleCache[size] = style;
	  }
	  return style;
	        };
var kmlvectors = new ol.layer.Vector({
  title: 'KML Vectors',
  visible: false,
  source: new ol.source.Vector({
    url: './data/2012_Earthquakes_Mag5.kml',
    format: new ol.format.KML({
        extractStyles: false
    })
  }),
  style: lightningStyleFunction
});



////////////////////////////////////////////////////////////////////////////////
// Heatmap
////////////////////////////////////////////////////////////////////////////////
var heatmap = new ol.layer.Heatmap({
  title: 'Heat Map',
  visible: false,
/*
  source: new ol.source.KML({
    extractStyles: false,
    projection: 'EPSG:3857',
    // url: './ol/examples/data/kml/2012_Earthquakes_Mag5.kml'
    url: './data/data.kml'
  }),
*/
  source: new ol.source.Vector({
    url: './data/data.kml',
    format: new ol.format.KML({
        extractStyles: false
    })
  }),
  blur: 5,
  radius: 5
});

heatmap.getSource().on('addfeature', function(event) {
  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a
  // standards-violating <magnitude> tag in each Placemark.  We extract it from
  // the Placemark's name instead.

//  var name = event.feature.get('name');
//  var magnitude = parseFloat(name.substr(2));
//  event.feature.set('weight', magnitude - 5);
  event.feature.set('weight', 1);
});

////////////////////////////////////////////////////////////////////////////////
// Clusters
////////////////////////////////////////////////////////////////////////////////

var earthquakeFill = new ol.style.Fill({
  color: 'rgba(255, 255, 0, 0.8)'
});
var earthquakeStroke = new ol.style.Stroke({
  color: 'rgba(255, 0, 0, 0.9)',
  width: 1
});
var textFill = new ol.style.Fill({
  color: '#000'
});
var textStroke = new ol.style.Stroke({
  color: 'rgba(255, 255, 255, 0.6)',
  width: 2
});
var invisibleFill = new ol.style.Fill({
  color: 'rgba(255, 0, 0, 1.00)'
});

function createEarthquakeStyle(feature) {
  var name = feature.get('name');
  return new ol.style.Style({
    geometry: feature.getGeometry(),
    image: new ol.style.RegularShape({
      radius1: 7,
      radius2: 3,
      points: 5,
      angle: Math.PI,
      fill: earthquakeFill,
      stroke: earthquakeStroke
    })
  });
}

function nicecolor(num,maxFeatureCount) {
	var opacity = 0.8;

	if (num >= maxFeatureCount / 2) {
		var brightness = 1 - (2.0 * num / maxFeatureCount - 1.0);
		return [127 + 127 * brightness, 0,  0,opacity];
	} else {
		var brightness = 1 - (num / maxFeatureCount * 2);
		return [255, 255*brightness,  0,opacity];
	}

	// their demo had:
	// [255, 153, 0, Math.min(0.8, 0.4 + (size / maxFeatureCount))]
	if      (num < 3.3)  {return [255,255,  0,opacity];}   // "#ffff00"
	else if (num < 10)   {return [255,191,  0,opacity];}   // "#ffcc00"
	else if (num < 33)   {return [255,127,  0,opacity];}   // "#ff8800"
	else if (num < 100)  {return [255, 63,  0,opacity];}   // "#ff4400"
	else if (num < 333)  {return [255,  0,  0,opacity];}   // "#ff0000"
	else if (num < 1000) {return [191,  0,  0,opacity];}   // "#cc0000"
	else if (num < 3333) {return [ 63,  0,  0,opacity];}   // "#880000"
	else                 {return [255,255,255,opacity];} // "#880000"
}

function clustersize(num) {
    if (num < 2) {return 2;}
    return Math.log(num)/Math.log(2) + 5;
}


var maxFeatureCount;
function calculateClusterInfo(resolution) {
  maxFeatureCount = 0;
  var features = clusters.getSource().getFeatures();
  var feature, radius, color;
  for (var i = features.length - 1; i >= 0; --i) {
    var feature = features[i];
    var origFeatures = feature.get('features');
    maxFeatureCount = Math.max(maxFeatureCount, origFeatures.length)
  }
  for (var i = features.length - 1; i >= 0; --i) {
    feature = features[i];
    var originalFeatures = feature.get('features');
    var extent = ol.extent.createEmpty();
    for (var j = 0, jj = originalFeatures.length; j < jj; ++j) {
      ol.extent.extend(extent, originalFeatures[j].getGeometry().getExtent());
    }
    radius = clustersize(originalFeatures.length);
    feature.set('radius', radius);
    color = nicecolor(originalFeatures.length,maxFeatureCount);
    feature.set('color', color);
  }
}

var currentResolution;
function styleFunction(feature, resolution) {
  if (resolution != currentResolution) {
    calculateClusterInfo(resolution);
    currentResolution = resolution;
  }
  var style;
  var size = feature.get('features').length;
  if (size > 1) {
    style = [new ol.style.Style({
      image: new ol.style.Circle({
        radius: feature.get('radius'),
        fill: new ol.style.Fill({
          color: feature.get('color')
        }),
        stroke: earthquakeStroke
      }),
      text: new ol.style.Text({
        text: size.toString(),
        fill: textFill,
        textAlign: 'center', 
        textBaseline: 'middle',
        offsetY: 1,
        font: 'bold 12px Arial',
        //stroke: textStroke
      })
    })];
  } else {
    var originalFeature = feature.get('features')[0];
    style = [createEarthquakeStyle(originalFeature)];
  }
  return style;
}

function selectStyleFunction(feature, resolution) {
  var styles = [new ol.style.Style({
    image: new ol.style.Circle({
      radius: feature.get('radius'),
      fill: invisibleFill
    })
  })];
  var originalFeatures = feature.get('features');
  var originalFeature;
  for (var i = originalFeatures.length - 1; i >= 0; --i) {
    originalFeature = originalFeatures[i];
    styles.push(createEarthquakeStyle(originalFeature));
  }
  return styles;
}

var clusters = new ol.layer.Vector({
  title: 'Clusters',
  visible: false,
  source: new ol.source.Cluster({
    distance: 14,
/*
    source: new ol.source.KML({
      extractStyles: false,
      projection: 'EPSG:3857',
      url: './data/data.kml'
    })
*/
  source: new ol.source.Vector({
    url: './data/data.kml',
    format: new ol.format.KML()
  }),

  }),
  style: styleFunction
});
////////////////////////////////////////////////////////////////////////////////





	var external_base_layers = [

                    new ol.layer.Tile({
                        title: 'Stamen Watercolor',
                        type: 'base',
                        visible: false,
                        source: new ol.source.Stamen({
                            layer: 'watercolor'
                        })
                    }),
                    new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: false,
                        source: new ol.source.OSM()
                    }),
	
                    new ol.layer.Tile({
                        title: 'Old OSM Data',
                        visible: false,
                        type: 'base',
                        source: new ol.source.TileWMS({
                            url: 'https://go.leapportal.us/tilecache/tilecache.cgi',
                            params: {'LAYERS': 'subtlecolor2'} //,
                            // serverType: 'geoserver'
                        })
                    }),

	    new ol.layer.Tile({
	       preload: Infinity,
	       type: 'base',
	       title: 'azure test server',
               visible: false,
	       source: new ol.source.XYZ({
		       url: 'http://13.91.253.215/mapcache/tms/1.0.0/' + 'higher_contrast' + '@g2/{z}/{x}/{-y}.png',
	       }),
	    }),

                    new ol.layer.Tile({
                        title: 'Satellite',
                        type: 'base',
                        visible: false,
                        source: new ol.source.MapQuest({layer: 'sat'})
                    })
       ];


var external_overlays = [atlasvector,kmlvectors,heatmap,clusters,
                    new ol.layer.Tile({
                        title: 'Countries',
                        visible: false,
                        source: new ol.source.TileWMS({
                            url: 'http://demo.opengeo.org/geoserver/wms',
                            params: {'LAYERS': 'ne:ne_10m_admin_1_states_provinces_lines_shp'},
                            serverType: 'geoserver'
                        })
                    })
                ];

        var layers = [
            new ol.layer.Group({
                'title': 'Base maps',
                layers: local_base_layers.concat(external_base_layers)
            }),
            new ol.layer.Group({
                title: 'Overlays',
                layers: local_overlay_layers.concat(external_overlays)
            })
        ];
        
        var map = new ol.Map({
          layers: layers,
          target: 'map',
          view: new ol.View({
	    center: center,
            zoom: zoom,
            rotation: rotation
          })
        });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Légende' // Optional label for button
    });
    map.addControl(layerSwitcher);



      var shouldUpdate = true;
      var view = map.getView();
      var updatePermalink = function() {
        if (!shouldUpdate) {
          // do not update the URL when the view was changed in the 'popstate' handler
          shouldUpdate = true;
          return;
        }
        var center = view.getCenter();
        var hash = '#map=' +
            view.getZoom() + '/' +
            Math.round(center[0] * 100) / 100 + '/' +
            Math.round(center[1] * 100) / 100 + '/' +
            view.getRotation();
        var state = {
          zoom: view.getZoom(),
          center: view.getCenter(),
          rotation: view.getRotation()
        };
        window.history.pushState(state, 'map', hash);
      };

      map.on('moveend', updatePermalink);

      // restore the view state when navigating through the history, see
      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
      window.addEventListener('popstate', function(event) {
        if (event.state === null) {
          return;
        }
        map.getView().setCenter(event.state.center);
        map.getView().setZoom(event.state.zoom);
        map.getView().setRotation(event.state.rotation);
        shouldUpdate = false;
      });
      </script>
</body>
<a href="test_maps.html#default">default</a>
</html>
